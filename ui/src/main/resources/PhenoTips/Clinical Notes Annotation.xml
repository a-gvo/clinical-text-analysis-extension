<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/
-->

<xwikidoc version="1.1">
  <web>PhenoTips</web>
  <name>Clinical Notes Annotation</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1423071031000</creationDate>
  <parent>PhenoTips.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1430247533000</date>
  <contentUpdateDate>1430160031000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <content/>
  <object>
    <name>PhenoTips.Clinical Notes Annotation</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>6af38783-9e99-485a-9c3c-ffa658637525</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>forbid</cache>
    </property>
    <property>
    <code>

require.config({
  paths: {
    "react": "$services.webjars.url('react', 'react.js')",
    "react-dom": "$services.webjars.url('react', 'react-dom.js')",
    "react-bootstrap": "$services.webjars.url('react-bootstrap', 'react-bootstrap.js')",
    "Pikaday": "$services.webjars.url('org.webjars.npm:pikaday', 'pikaday.js')",
    "lodash": "$services.webjars.url('org.webjars.bower:lodash', 'dist/lodash.min.js')",
  },
});

/**
 * Sadly, the text boxes that we listen to exist outside of React's world, so this component encapsulates them.
 */
define("SuggestionSourceListener", [], function() {
  return {
    getSourceTexts: function() {
       return this.suggestionSources.pluck('value').join('.\n');
    },
    init: function(cb) {
      var suggestionSourcesIds = ['indication_for_referral', 'medical_history'];
      var that = this;
      this.suggestionSources = $$('textarea[name$="' + suggestionSourcesIds.join('"], textarea[name$="') + '"]');
      this.suggestionSources.invoke('observe', 'blur', function() {
        var newText = that.getSourceTexts();
        if (newText != this.text) {
          this.text = newText;
          if(this.text) {
            cb(this.text);
          }
        }
      });
    },
  };
});

/**
 * This object interacts with the PhenoTips backend to make sure suggestions we dismiss go
 * away for good.
 */
define("SuggestionsDismisser", ["lodash"], function(_) {
  return {
    _dismissed: {},
    _existsDataStore: false,
    /**
     * Given a dictionary of suggestions, return a version without those that have been dismissed in the past.
     */
    filter: function(suggestions) {
      return _.omit(suggestions, _.keys(this._dismissed));
    },
    dismiss: function(phenotype, onDone) {
      this._dismissed[phenotype.id] = true;
      this._persist(onDone);
    },
    clear: function(onDone) {
      this._dismissed = {};
      this._persist(onDone);
    },
    _persist: function(onDone) {
      var delimited = _.keys(this._dismissed).join('|');
      var parameters = {
        'ajax': true,
        'form_token': $$("meta[name='form_token']")[0].content,
      };
      if(this._existsDataStore) {
        parameters['PhenoTips.DismissedSuggestionsClass_0_terms'] = delimited;
      } else {
        parameters.classname = 'PhenoTips.DismissedSuggestionsClass';
        parameters['PhenoTips.DismissedSuggestionsClass_terms'] = delimited;
      }
      var url = XWiki.currentDocument.getURL((this._existsDataStore ? 'save' : 'objectadd'));
      var that = this;
      new Ajax.Request(url, {
        parameters: parameters,
        onSuccess: function() {
          that._existsDataStore = true;
        },
        onComplete: onDone
      });
    },
    init: function(onDone) {
      var url = XWiki.currentDocument.getRestURL('objects/PhenoTips.DismissedSuggestionsClass/0/properties/terms');
      var that = this;
      new Ajax.Request(url, {
        method: 'get',
        requestHeaders: {'Accept': 'application/json'},
        onSuccess: function(response) {
          var keys = response.responseJSON.value.split('|');
          keys.forEach(function(e) { that._dismissed[e] = true; });
          that._existsDataStore = true;
        },
        onComplete: onDone,
      });
    },
  };
});

/**
 * This is a port to react of PhenoTips' existing YesNoPicker element.
 * It's much reduced in functionality, and only displays the buttons and provides callbacks on them.
 */
define("ReactYNPicker", ['react', 'lodash'], function(React, _) {
  return React.createClass({
    displayName: 'yn-picker',
    propTypes: {
      onButton: React.PropTypes.object.isRequired,
    },
    _supported: {
      yes : {label: 'Y', title : "$services.localization.render('phenotips.yesNoNAPicker.yes.title')"},
      no  : {label: 'N', title : "$services.localization.render('phenotips.yesNoNAPicker.no.title')"},
      na  : {label: 'NA', title : "$services.localization.render('phenotips.yesNoNAPicker.NA.title')"}
    },
    render: function() {
      var that = this;
      var inner = _.filter(_.keys(this._supported).map(function(key) {
        var value = that._supported[key];
        if (!that.props.onButton[key]) {
          return null;
        }
        return React.createElement('label', {
          className: key,
          title: value.title,
          onClick: that.props.onButton[key],
          key: key,
        }, value.label);
      }), _.identity);
      return React.createElement('span', {className: 'yes-no-picker'}, inner);
    }
  });
});

define("SuggestionsLoading", ['react'], function(React) {
  return React.createClass({
    displayName: 'suggestions-loading',
    render: function() {
      return React.createElement('div',
        {id: 'annotation-widget-container'},
        React.createElement('div',
          {className: 'loading-container'},
          React.createElement('div', {id: 'suggestions-spinner', className: 'fa fa-lg fa-spinner fa-spin'}),
          React.createElement('div', {id: 'generating-suggestions-label'}, 'Generating Suggestions')
        )
      );
    },
  });
});

define("SuggestionElement", ['react', "ReactYNPicker", "lodash"], function(React, ReactYNPicker, _) {
  return React.createClass({
    displayName: 'suggestion-element',
    propTypes: {
      phenotype: React.PropTypes.object.isRequired,
      onSelect: React.PropTypes.func.isRequired,
      onDismiss: React.PropTypes.func.isRequired,
    },
    onYes: function() {
      var phenotype = _.clone(this.props.phenotype);
      phenotype.isObserved = true;
      this.props.onSelect(phenotype);
    },
    onNo: function() {
      var phenotype = _.clone(this.props.phenotype);
      phenotype.isObserved = false;
      this.props.onSelect(phenotype);
    },
    onDismiss: function() {
      var phenotype = _.clone(this.props.phenotype);
      this.props.onDismiss(phenotype);
    },
    render: function() {
      var sentence = this.props.phenotype.sentence;
      var end = this.props.phenotype.endInSentence;
      var start = this.props.phenotype.startInSentence;
      return React.createElement('li',
          {className: 'suggestion-list-item'},
          React.createElement('div', {className: 'suggestion'},
            React.createElement('div',
              {className: 'suggestion-headline'},
              React.createElement(ReactYNPicker, {onButton: {yes: this.onYes, no: this.onNo}}),
              React.createElement('span', {className: 'suggestion-term'}, this.props.phenotype.label),
              React.createElement('span', {className: 'xHelpButton fa fa-info-circle phenotype-info',
                                           title: this.props.phenotype.id})
              ),
            React.createElement('div',
              {className: 'suggestion-quote'},
              '...' + sentence.substring(0, start),
              React.createElement('span', {className: 'quoted-term'}, sentence.substring(start, end)),
              sentence.substring(end, sentence.length) + '...'
              ),
            React.createElement('div', {className: 'hide-suggestion', onClick: this.onDismiss}, "✖")
            )
          );
    },
  });
});

define("SuggestionList", ['react', "SuggestionElement", "lodash"], function(React, SuggestionElement, _) {
  return React.createClass({
    displayName: 'suggestion-list',
    propTypes: {
      phenotypes: React.PropTypes.object.isRequired,
      onSelect: React.PropTypes.func.isRequired,
      onDismiss: React.PropTypes.func.isRequired,
      pageSize: React.PropTypes.number,
    },
    getDefaultProps: function() {
      return {
        pageSize: 4,
      };
    },
    getInitialState: function() {
      return {
        page: 0,
      };
    },
    componentWillReceiveProps: function(nextProps) {
      /* We can't be paging past the end, so roll it back if necessary. */
      if(this.state.page >= this._maxPages(nextProps.phenotypes, nextProps.pageSize)) {
        this.setState({ page: this._maxPages(nextProps.phenotypes, nextProps.pageSize) - 1 });
      }
    },
    nextPage: function() {
      this.setState({ page: Math.min(this.state.page + 1, this._maxPages())});
    },
    prevPage: function() {
      this.setState({ page: Math.max(this.state.page - 1, 0)});
    },
    _maxPages: function(phenotypes, pageSize) {
      phenotypes = phenotypes || this.props.phenotypes;
      pageSize = pageSize || this.props.pageSize;
      return Math.ceil(_.keys(phenotypes).length / pageSize);
    },
    render: function() {
      var prev = null;
      var next = null;
      if (this.state.page !== 0) {
        prev = React.createElement('span', {className: 'fa fa-chevron-left navigation', onClick: this.prevPage, key: 'prev'});
      }
      if ((this.state.page + 1) &lt; this._maxPages()) {
        next = React.createElement('span', {className: 'fa fa-chevron-right navigation', onClick: this.nextPage, key: 'next'});
      }
      var that = this;
      var len = _.keys(this.props.phenotypes).length;
      var start = this.state.page * this.props.pageSize;
      var end = Math.min(start + this.props.pageSize, len);
      var list = _.keys(this.props.phenotypes).slice(start, end).map(function(key) {
        var phenotype = that.props.phenotypes[key];
        return React.createElement(SuggestionElement, {
          phenotype: phenotype,
          onSelect: that.props.onSelect,
          onDismiss: that.props.onDismiss,
          key: phenotype.id,
        });
      });
      var count = 'No suggestions to display';
      if (len) {
        count = (start + 1) + " to " + end + " of " + len + " suggestions.";
      }
      var ul = React.createElement('ul', {className: 'suggestions-list', key: 'suggestions-list'}, list);
      var inner = _.filter([prev, ul, next], _.identity);
      return React.createElement('div', {id: 'annotation-widget-container'},
          React.createElement('div', {id: 'suggestions-container'}, inner),
          React.createElement('div', {id: 'suggestion-count'}, count)
          );
    },
  });
});

define("RefreshButton", ["react"], function(React) {
  return React.createClass({
    displayName: 'refresh-button',
    propTypes: {
      onRefresh: React.PropTypes.func.isRequired,
    },
    render: function() {
      return React.createElement('span',
        {id: 'annotation-refresh', className: 'fa fa-refresh xHelpButton', 'aria-hidden': 'true',
         onClick: this.props.onRefresh});
    },
  });
});

define("ClinicalNotesAnnotation", ["react", "PhenotypeSelectionUtils", "SuggestionSourceListener", "SuggestionsLoading", "SuggestionList",
                                   "RefreshButton", "SuggestionsDismisser", 'lodash'],
                           function(React, PhenotypeSelectionUtils, SuggestionSourceListener,   SuggestionsLoading,   SuggestionList,
                                    RefreshButton,  SuggestionsDismisser, _) {
  return React.createClass({
    displayName: 'clinical-notes-annotation-panel',
    onSourceBoxUpdate: function(text) {
      /* React is ajax agnostic, so let's just stick to prototype here */
      var queryString = '?outputSyntax=plain';
      var url = new XWiki.Document('AnnotationService', 'PhenoTips').getURL('get') + queryString;
      this.setState({ loading: true }, function() {
        new Ajax.Request(url, {
          parameters: {
            text: text,
          },
          onSuccess: this.setResults,
        });
      });
    },
    setResults: function(results) {
      var suggestions = SuggestionsDismisser.filter(results.responseJSON.response);
      var existing = PhenotypeSelectionUtils.getSelectedPhenotypes().map(function (o) { return o.id; });
      suggestions = _.omit(suggestions, existing);
      this.setState({
        loading: false,
        suggestions: suggestions,
      });
    },
    getInitialState: function() {
      return {
        suggestions: {},
        loading: false,
      };
    },
    componentDidMount: function() {
      SuggestionSourceListener.init(this.onSourceBoxUpdate);
      SuggestionsDismisser.init(this._forceRefresh);
    },
    onRefresh: function() {
      SuggestionsDismisser.clear(this._forceRefresh);
    },
    onSelectPhenotype: function(phenotype) {
      PhenotypeSelectionUtils.selectPhenotype(phenotype, '');
      this.onDismissPhenotype(phenotype);
    },
    onDismissPhenotype: function(phenotype) {
      var that = this;
      SuggestionsDismisser.dismiss(phenotype, function() {
        var suggestions = that.state.suggestions;
        suggestions = SuggestionsDismisser.filter(suggestions);
        that.setState({suggestions: suggestions});
      });
    },
    _forceRefresh: function() {
      this.onSourceBoxUpdate(SuggestionSourceListener.getSourceTexts());
    },
    render: function() {
      var inner = null;
      if(this.state.loading) {
        inner = React.createElement(SuggestionsLoading);
      } else {
        inner = React.createElement(SuggestionList, {
          onSelect: this.onSelectPhenotype,
          onDismiss: this.onDismissPhenotype,
          phenotypes: this.state.suggestions,
        });
      }
      return React.createElement('div',
        {className: 'sub-panel'},
        React.createElement('h3',
          {className: 'wikigeneratedheader'},
          React.createElement('span', null, React.createElement('strong', null, 'Suggestions from Clinical Notes')),
          React.createElement(RefreshButton, {onRefresh: this.onRefresh})),
        inner);
    },
  });
});

require(['react', 'react-dom', 'ClinicalNotesAnnotation'], function(React, ReactDOM, ClinicalNotesAnnotation) {
  var init = function() {
    var contain = new Element('div', {id: 'clinical-notes-container'});
    $$('.current-phenotype-selection')[0].insert({top: contain})
    ReactDOM.render(React.createElement(ClinicalNotesAnnotation, null), contain);
  };

  (XWiki.domIsLoaded &amp;&amp; init()) || document.observe("xwiki:dom:loaded", init);
});
    </code>
    </property>
    <property>
      <name/>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.Clinical Notes Annotation</name>
    <number>10</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>28d6e323-d40f-4a43-a287-5b04240dff39</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>define("PhenotypeSelectionUtils", [], function() {
  return {
    /*
      phenotype data structure:
      id &lt;- an HPO id or arbitrary text
      isObserved &lt;- boolean describing whether or not the phenotype was observed
      qualifiers: {
        spatial_pattern &lt;- HPO ID
        severity &lt;- HPO ID
      }
    */

    /**
     * Selects a phenotype. If the phenotype is already selected, do nothing.
     * @param  {object} phenotype         the phenotype. see object spec above.
     * @param  {string} autoSelectSrcDesc a string describing the reason for auto-selection of this phenotype, if applicable.
     */
    selectPhenotype: function(phenotype, autoSelectSrcDesc) {
      var _this = this;
      var addAutomaticSelectionIndicator = function(phenotypeEl) {
        var addedItem = $('current-phenotype-selection').down('label input[value="' + phenotypeEl.value + '"]');
        if (addedItem &amp;&amp; autoSelectSrcDesc) {
          addedItem.up('label').insert({before : new Element('span', {
                                                               'class' : 'fa fa-bolt',
                                                               'title' : 'This phenotype was automatically added based on ' + autoSelectSrcDesc
          }).update(' ')});
        }
      };

      var existingEl = this._findFormElementForPhenotype(phenotype.id, !phenotype.isObserved);
      if (existingEl) {
        if (existingEl._ynpicker) {
          existingEl._ynpicker._select(phenotype.isObserved ? 'yes' : 'no');
        } else {
          existingEl.checked = true;
        }
        addAutomaticSelectionIndicator(existingEl);
      } else {
        var suggestWidget = $("quick-phenotype-search")._suggestWidget;
        if (!suggestWidget) {
           return null;
        }
        var id = phenotype.id;
        var searchUrl = new XWiki.Document('SolrService', 'PhenoTips').getURL("get", "q=" + id);
        new Ajax.Request(searchUrl, {
          method: 'get',
          onSuccess: function(transport) {
            var response = transport.responseJSON.rows[0];
            if (response) {
              var categories = "";
              if (!phenotype.isObserved) {
                categories += '&lt;input type="hidden" name="fieldName" value="PhenoTips.PatientClass_0_negative_phenotype" class="no"&gt;';
              }
              categories += '&lt;span class="hidden term-category"&gt;';
              response.term_category.each(function(category){categories += '&lt;input type="hidden" value="' + category + '"&gt;';});
              categories += "&lt;/span&gt;";
              var data = {
                id: id,
                value: response.name,
                category: categories,
                negative: !phenotype.isObserved
              };
              var title = response.name;
              suggestWidget.acceptEntry(data, title, title, true);

              existingEl = _this._findFormElementForPhenotype(phenotype.id, !phenotype.isObserved);
              addAutomaticSelectionIndicator(existingEl);
            }
          }
        });
      }
    },

    /**
     * Deselects a phenotype. If the phenotype is not selected, do nothing.
     * @param  {object} phenotype the phenotype. see object spec above.
     */
    deselectPhenotype: function(phenotype) {
      var phenotypeEl = this._findFormElementForPhenotype(phenotype.id, !phenotype.isObserved);
      if (phenotypeEl) {
        if (phenotypeEl) {
          phenotypeEl._ynpicker._onUnselect();
        } else {
          phenotypeEl.checked = false;
        }
      }
    },

    getSelectedPhenotypes: function() {
      return $$('div.phenotype .yes-no-picker').map(function(e) {
        var yes = e.down('.yes input');
        var no = e.down('.no input');
        if (yes.name === no.name) {
          return null;
        }
        var id = yes.value;
        var set = yes.checked || no.checked;
        if(set) {
          return {id: id, isObserved: yes.checked};
        } else {
          return null;
        }
      }).filter(function(e) { return e; });
    },

    /**
     * Updates a selected phenotype. If the phenotype is not selected, do nothing.
     */
    /*updateSelectedPhenotype: function(phenotype) {
    },*/

    _findFormElementForPhenotype: function(id, negative, subtype) {
      var result = null;
      if ($('prefix')) {
        result = $($('prefix').value + (negative ? 'negative_' : '') + (subtype ? subtype + '_' : '') + 'phenotype_' + id);
      }
      return result;
    },
  };
});</code>
    </property>
    <property>
      <name>PhenotypeSelectionUtils</name>
    </property>
    <property>
      <parse/>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.Clinical Notes Annotation</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>8468027f-2638-489a-a4b8-d8a909d851f2</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>forbid</cache>
    </property>
    <property>
        <code>#template("colorThemeInit.vm")

.loading-container {
  text-align: center;
  margin: 1em;
}

.loading-container #generating-suggestions-label {
  margin: 1em;
}

#suggestions-container {
  padding-top: 0.8em;
  -webkit-column-count: 2; /* Chrome, Safari, Opera */
  -moz-column-count: 2; /* Firefox */
  column-count: 2;
  display: table;
}
#suggestions-container .suggestions-list {
  margin: 0 2em 0 2em;
}

#suggestions-container .suggestion-list-item {
  list-style-type: none;
  display: table-cell;
  float: left;
  width: 50%;
}

#suggestions-container .suggestion {
  margin: 0 1.0em 1.7em;
  position: relative;
  -webkit-column-break-inside: avoid;
  -moz-column-break-inside: avoid;
  -o-column-break-inside: avoid;
  column-break-inside: avoid;
  display: table;
  height: 5em;
}

#suggestions-container .yes-no-picker {
margin: 0;
}

#suggestions-container .suggestion-term {
  font-weight: bold;
  margin: 0 .4em;
}

#suggestions-container .suggestion-quote {
  margin-top: .4em;
  font-style: italic;
}

#suggestions-container .quoted-term {
  background-color: yellow;
  font-style: normal;
}

#suggestions-container .hide-suggestion {
  position: absolute;
  top: 0;
  right: 0;
  cursor: pointer;
}

#annotation-refresh {
  float: right;
}

#suggestion-count {
  text-align: center;
  margin-bottom: 1em;
  }

#suggestions-container &gt; ul {
  padding-bottom: 0.3em;
  padding-left: 1em;
  width: 90%;
}

#suggestions-container &gt; * {
  display: table-cell;
  vertical-align: middle;
}

#suggestions-container &gt; span {
  text-align: center;
}

#suggestions-container &gt; .navigation:hover {
  background-color: rgba(0,0,0,0.1);
  color: $theme.linkColor;
  cursor: pointer;
  transition: all 0.2s linear;
}</code>
    </property>
    <property>
      <name/>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.Clinical Notes Annotation</name>
    <number>0</number>
    <className>XWiki.UIExtensionClass</className>
    <guid>a8efe7b6-6399-436e-8f71-a27dce8382a0</guid>
    <class>
      <name>XWiki.UIExtensionClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <content>
        <disabled>0</disabled>
        <name>content</name>
        <number>3</number>
        <prettyName>Extension Content</prettyName>
        <rows>10</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </content>
      <extensionPointId>
        <disabled>0</disabled>
        <name>extensionPointId</name>
        <number>1</number>
        <prettyName>Extension Point ID</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </extensionPointId>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>2</number>
        <prettyName>Extension ID</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parameters>
        <disabled>0</disabled>
        <name>parameters</name>
        <number>4</number>
        <prettyName>Extension Parameters</prettyName>
        <rows>10</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </parameters>
      <scope>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>scope</name>
        <number>5</number>
        <prettyName>Extension Scope</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>wiki=Current Wiki|user=Current User|global=Global</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </scope>
    </class>
    <property>
      <content>{{velocity}}
$xwiki.ssx.use('PhenoTips.Clinical Notes Annotation', {'colorTheme' : "$xwiki.getSpacePreference('colorTheme')"})##
$xwiki.jsx.use('PhenoTips.Clinical Notes Annotation')##</content>
    </property>
    <property>
      <extensionPointId>org.phenotips.patientSheet.section.phenotype-info</extensionPointId>
    </property>
    <property>
      <name>org.phenotips.patientSheet.field.phenotype-suggestion</name>
    </property>
    <property>
      <parameters>title=Phenotype Suggestions Extracted from Clinical Notes
enabled=true
required=
order=2
fields=</parameters>
    </property>
    <property>
      <scope>wiki</scope>
    </property>
  </object>
</xwikidoc>
